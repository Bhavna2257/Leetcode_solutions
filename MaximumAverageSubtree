/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class MaximumAverageSubtree {
    public double maximumAverageSubtree(TreeNode root) {
        double max = Double.MIN_VALUE;
        if (root == null) return max;
        
        Queue<TreeNode> queue = new LinkedList<>();
        
        queue.add(root);
        while(!queue.isEmpty()) {
            TreeNode currNode = queue.remove();
            double res = findAvg(currNode);
            max = Math.max(res , max);
            if(currNode.left != null) {
                queue.add(currNode.left);
            }
            if(currNode.right != null) {
                queue.add(currNode.right);
            }
            
        }
        return max;
    }
    
    private double findAvg(TreeNode currNode) {
        Queue<TreeNode> queue = new LinkedList<>();
        double sum = 0;
        int n = 0;
        queue.add(currNode);
        while(!queue.isEmpty()) {
            TreeNode node = queue.remove();
            sum = sum + (double) node.val;
            n++;
            if(node.left != null) {
                queue.add(node.left);
            }
            if(node.right != null) {
                queue.add(node.right);
            }
            
        }
        sum = sum / n;
        return sum;
    }
}
